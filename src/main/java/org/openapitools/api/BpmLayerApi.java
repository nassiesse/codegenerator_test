/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.BaseError;
import org.openapitools.model.CompleteUserTaskReq;
import org.openapitools.model.CreateProcessRepr;
import org.openapitools.model.CreateProcessReq;
import org.openapitools.model.ProcessRepr;
import org.openapitools.model.ValidationError;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-27T08:27:02.169404Z[Etc/UTC]", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "bpm-layer-resource-controller", description = "the bpm-layer-resource-controller API")
public interface BpmLayerApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PATCH /bpm-layer/task/{taskId}/assign : Assign the task to a user.
     *
     * @param taskId  (required)
     * @return TooManyRequestsError (status code 429)
     *         or Updated (status code 200)
     *         or NotFoundError (status code 404)
     *         or ForbiddenError (status code 403)
     *         or BadRequestError (status code 400)
     *         or UnauthorizedError (status code 401)
     *         or InternalServerError (status code 500)
     */
    @Operation(
        operationId = "claimUserTask",
        summary = "Assign the task to a user.",
        tags = { "bpm-layer-resource-controller" },
        responses = {
            @ApiResponse(responseCode = "429", description = "TooManyRequestsError"),
            @ApiResponse(responseCode = "200", description = "Updated"),
            @ApiResponse(responseCode = "404", description = "NotFoundError"),
            @ApiResponse(responseCode = "403", description = "ForbiddenError"),
            @ApiResponse(responseCode = "400", description = "BadRequestError"),
            @ApiResponse(responseCode = "401", description = "UnauthorizedError"),
            @ApiResponse(responseCode = "500", description = "InternalServerError")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/bpm-layer/task/{taskId}/assign"
    )
    
    default ResponseEntity<Void> claimUserTask(
        @Parameter(name = "taskId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("taskId") String taskId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /bpm-layer/task/{taskId}/complete : Complete the user task.
     *
     * @param taskId  (required)
     * @param completeUserTaskReq  (required)
     * @return TooManyRequestsError (status code 429)
     *         or Updated (status code 200)
     *         or NotFoundError (status code 404)
     *         or ForbiddenError (status code 403)
     *         or BadRequestError (status code 400)
     *         or UnauthorizedError (status code 401)
     *         or InternalServerError (status code 500)
     */
    @Operation(
        operationId = "completeUserTask",
        summary = "Complete the user task.",
        tags = { "bpm-layer-resource-controller" },
        responses = {
            @ApiResponse(responseCode = "429", description = "TooManyRequestsError"),
            @ApiResponse(responseCode = "200", description = "Updated"),
            @ApiResponse(responseCode = "404", description = "NotFoundError"),
            @ApiResponse(responseCode = "403", description = "ForbiddenError"),
            @ApiResponse(responseCode = "400", description = "BadRequestError"),
            @ApiResponse(responseCode = "401", description = "UnauthorizedError"),
            @ApiResponse(responseCode = "500", description = "InternalServerError")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/bpm-layer/task/{taskId}/complete",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> completeUserTask(
        @Parameter(name = "taskId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("taskId") String taskId,
        @Parameter(name = "CompleteUserTaskReq", description = "", required = true) @Valid @RequestBody CompleteUserTaskReq completeUserTaskReq
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /bpm-layer/process : Operation to create a new process instance.
     *
     * @param createProcessReq  (required)
     * @return UnauthorizedError (status code 401)
     *         or Created (status code 201)
     *         or ForbiddenError (status code 403)
     *         or TooManyRequestsError (status code 429)
     *         or NotFoundError (status code 404)
     *         or InternalServerError (status code 500)
     *         or BadRequestError (status code 400)
     */
    @Operation(
        operationId = "createProcess",
        summary = "Operation to create a new process instance.",
        tags = { "bpm-layer-resource-controller" },
        responses = {
            @ApiResponse(responseCode = "401", description = "UnauthorizedError", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseError.class))
            }),
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateProcessRepr.class))
            }),
            @ApiResponse(responseCode = "403", description = "ForbiddenError", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseError.class))
            }),
            @ApiResponse(responseCode = "429", description = "TooManyRequestsError", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseError.class))
            }),
            @ApiResponse(responseCode = "404", description = "NotFoundError", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseError.class))
            }),
            @ApiResponse(responseCode = "500", description = "InternalServerError", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseError.class))
            }),
            @ApiResponse(responseCode = "400", description = "BadRequestError", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ValidationError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/bpm-layer/process",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CreateProcessRepr> createProcess(
        @Parameter(name = "CreateProcessReq", description = "", required = true) @Valid @RequestBody CreateProcessReq createProcessReq
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"Error Message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"processInstanceKey\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"Error Message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"Error Message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"Error Message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"Error Message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"Error Message\", \"errors\" : [ { \"fieldName\" : \"string\", \"errorDescription\" : \"string\", \"fieldValue\" : \"string\" }, { \"fieldName\" : \"string\", \"errorDescription\" : \"string\", \"fieldValue\" : \"string\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /bpm-layer/process/{processInstanceKey} : Abort the process execution.
     *
     * @param processInstanceKey  (required)
     * @return TooManyRequestsError (status code 429)
     *         or NotFoundError (status code 404)
     *         or ForbiddenError (status code 403)
     *         or Success (status code 204)
     *         or BadRequestError (status code 400)
     *         or UnauthorizedError (status code 401)
     *         or InternalServerError (status code 500)
     */
    @Operation(
        operationId = "deleteProcess",
        summary = "Abort the process execution.",
        tags = { "bpm-layer-resource-controller" },
        responses = {
            @ApiResponse(responseCode = "429", description = "TooManyRequestsError"),
            @ApiResponse(responseCode = "404", description = "NotFoundError"),
            @ApiResponse(responseCode = "403", description = "ForbiddenError"),
            @ApiResponse(responseCode = "204", description = "Success"),
            @ApiResponse(responseCode = "400", description = "BadRequestError"),
            @ApiResponse(responseCode = "401", description = "UnauthorizedError"),
            @ApiResponse(responseCode = "500", description = "InternalServerError")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/bpm-layer/process/{processInstanceKey}"
    )
    
    default ResponseEntity<Void> deleteProcess(
        @Parameter(name = "processInstanceKey", description = "", required = true, in = ParameterIn.PATH) @PathVariable("processInstanceKey") Long processInstanceKey
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /bpm-layer/test
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getTest",
        tags = { "bpm-layer-resource-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/bpm-layer/test",
        produces = { "*/*" }
    )
    
    default ResponseEntity<String> getTest(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /bpm-layer/process/{processInstanceKey} : Retrieves the process information
     *
     * @param processInstanceKey  (required)
     * @return UnauthorizedError (status code 401)
     *         or Success (status code 200)
     *         or ForbiddenError (status code 403)
     *         or TooManyRequestsError (status code 429)
     *         or NotFoundError (status code 404)
     *         or InternalServerError (status code 500)
     *         or BadRequestError (status code 400)
     */
    @Operation(
        operationId = "retrieveProcess",
        summary = "Retrieves the process information",
        tags = { "bpm-layer-resource-controller" },
        responses = {
            @ApiResponse(responseCode = "401", description = "UnauthorizedError", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseError.class))
            }),
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProcessRepr.class))
            }),
            @ApiResponse(responseCode = "403", description = "ForbiddenError", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseError.class))
            }),
            @ApiResponse(responseCode = "429", description = "TooManyRequestsError", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseError.class))
            }),
            @ApiResponse(responseCode = "404", description = "NotFoundError", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseError.class))
            }),
            @ApiResponse(responseCode = "500", description = "InternalServerError", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseError.class))
            }),
            @ApiResponse(responseCode = "400", description = "BadRequestError", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ValidationError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/bpm-layer/process/{processInstanceKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProcessRepr> retrieveProcess(
        @Parameter(name = "processInstanceKey", description = "", required = true, in = ParameterIn.PATH) @PathVariable("processInstanceKey") Long processInstanceKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"Error Message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"processInstanceKey\" : 0, \"endDate\" : \"2023-10-12T08:38:44.041Z\", \"state\" : \"ACTIVE\", \"startDate\" : \"2023-10-12T08:38:44.041Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"Error Message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"Error Message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"Error Message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"Error Message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"Error Message\", \"errors\" : [ { \"fieldName\" : \"string\", \"errorDescription\" : \"string\", \"fieldValue\" : \"string\" }, { \"fieldName\" : \"string\", \"errorDescription\" : \"string\", \"fieldValue\" : \"string\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /bpm-layer/task/{taskId}/unassign : Revoke the user assigned to a task
     *
     * @param taskId  (required)
     * @return TooManyRequestsError (status code 429)
     *         or Updated (status code 200)
     *         or NotFoundError (status code 404)
     *         or ForbiddenError (status code 403)
     *         or BadRequestError (status code 400)
     *         or UnauthorizedError (status code 401)
     *         or InternalServerError (status code 500)
     */
    @Operation(
        operationId = "unclaimUserTask",
        summary = "Revoke the user assigned to a task",
        tags = { "bpm-layer-resource-controller" },
        responses = {
            @ApiResponse(responseCode = "429", description = "TooManyRequestsError"),
            @ApiResponse(responseCode = "200", description = "Updated"),
            @ApiResponse(responseCode = "404", description = "NotFoundError"),
            @ApiResponse(responseCode = "403", description = "ForbiddenError"),
            @ApiResponse(responseCode = "400", description = "BadRequestError"),
            @ApiResponse(responseCode = "401", description = "UnauthorizedError"),
            @ApiResponse(responseCode = "500", description = "InternalServerError")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/bpm-layer/task/{taskId}/unassign"
    )
    
    default ResponseEntity<Void> unclaimUserTask(
        @Parameter(name = "taskId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("taskId") String taskId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
