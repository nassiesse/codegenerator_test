/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.BaseError;
import io.swagger.model.CompleteUserTaskReq;
import io.swagger.model.CreateProcessRepr;
import io.swagger.model.CreateProcessReq;
import io.swagger.model.ProcessRepr;
import io.swagger.model.ValidationError;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-03-26T17:53:54.587113Z[Etc/UTC]")
@Validated
public interface BpmLayerApi {

    @Operation(summary = "Assign the task to a user.", description = "", tags={ "bpm-layer-resource-controller" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "429", description = "TooManyRequestsError"),
        
        @ApiResponse(responseCode = "200", description = "Updated"),
        
        @ApiResponse(responseCode = "404", description = "NotFoundError"),
        
        @ApiResponse(responseCode = "403", description = "ForbiddenError"),
        
        @ApiResponse(responseCode = "400", description = "BadRequestError"),
        
        @ApiResponse(responseCode = "401", description = "UnauthorizedError"),
        
        @ApiResponse(responseCode = "500", description = "InternalServerError") })
    @RequestMapping(value = "/bpm-layer/task/{taskId}/assign",
        method = RequestMethod.PATCH)
    ResponseEntity<Void> claimUserTask(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("taskId") String taskId);


    @Operation(summary = "Complete the user task.", description = "", tags={ "bpm-layer-resource-controller" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "429", description = "TooManyRequestsError"),
        
        @ApiResponse(responseCode = "200", description = "Updated"),
        
        @ApiResponse(responseCode = "404", description = "NotFoundError"),
        
        @ApiResponse(responseCode = "403", description = "ForbiddenError"),
        
        @ApiResponse(responseCode = "400", description = "BadRequestError"),
        
        @ApiResponse(responseCode = "401", description = "UnauthorizedError"),
        
        @ApiResponse(responseCode = "500", description = "InternalServerError") })
    @RequestMapping(value = "/bpm-layer/task/{taskId}/complete",
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<Void> completeUserTask(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("taskId") String taskId, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CompleteUserTaskReq body);


    @Operation(summary = "Operation to create a new process instance.", description = "", tags={ "bpm-layer-resource-controller" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "401", description = "UnauthorizedError", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BaseError.class))),
        
        @ApiResponse(responseCode = "201", description = "Created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CreateProcessRepr.class))),
        
        @ApiResponse(responseCode = "403", description = "ForbiddenError", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BaseError.class))),
        
        @ApiResponse(responseCode = "429", description = "TooManyRequestsError", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BaseError.class))),
        
        @ApiResponse(responseCode = "404", description = "NotFoundError", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BaseError.class))),
        
        @ApiResponse(responseCode = "500", description = "InternalServerError", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BaseError.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequestError", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ValidationError.class))) })
    @RequestMapping(value = "/bpm-layer/process",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<CreateProcessRepr> createProcess(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CreateProcessReq body);


    @Operation(summary = "Abort the process execution.", description = "", tags={ "bpm-layer-resource-controller" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "429", description = "TooManyRequestsError"),
        
        @ApiResponse(responseCode = "404", description = "NotFoundError"),
        
        @ApiResponse(responseCode = "403", description = "ForbiddenError"),
        
        @ApiResponse(responseCode = "204", description = "Success"),
        
        @ApiResponse(responseCode = "400", description = "BadRequestError"),
        
        @ApiResponse(responseCode = "401", description = "UnauthorizedError"),
        
        @ApiResponse(responseCode = "500", description = "InternalServerError") })
    @RequestMapping(value = "/bpm-layer/process/{processInstanceKey}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteProcess(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("processInstanceKey") Long processInstanceKey);


    @Operation(summary = "", description = "", tags={ "bpm-layer-resource-controller" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/bpm-layer/test",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> getTest();


    @Operation(summary = "Retrieves the process information", description = "", tags={ "bpm-layer-resource-controller" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "401", description = "UnauthorizedError", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BaseError.class))),
        
        @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProcessRepr.class))),
        
        @ApiResponse(responseCode = "403", description = "ForbiddenError", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BaseError.class))),
        
        @ApiResponse(responseCode = "429", description = "TooManyRequestsError", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BaseError.class))),
        
        @ApiResponse(responseCode = "404", description = "NotFoundError", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BaseError.class))),
        
        @ApiResponse(responseCode = "500", description = "InternalServerError", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BaseError.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequestError", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ValidationError.class))) })
    @RequestMapping(value = "/bpm-layer/process/{processInstanceKey}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ProcessRepr> retrieveProcess(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("processInstanceKey") Long processInstanceKey);


    @Operation(summary = "Revoke the user assigned to a task", description = "", tags={ "bpm-layer-resource-controller" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "429", description = "TooManyRequestsError"),
        
        @ApiResponse(responseCode = "200", description = "Updated"),
        
        @ApiResponse(responseCode = "404", description = "NotFoundError"),
        
        @ApiResponse(responseCode = "403", description = "ForbiddenError"),
        
        @ApiResponse(responseCode = "400", description = "BadRequestError"),
        
        @ApiResponse(responseCode = "401", description = "UnauthorizedError"),
        
        @ApiResponse(responseCode = "500", description = "InternalServerError") })
    @RequestMapping(value = "/bpm-layer/task/{taskId}/unassign",
        method = RequestMethod.PATCH)
    ResponseEntity<Void> unclaimUserTask(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("taskId") String taskId);

}

